<?php
/**
 * Implementation of hook_boot()
 */
function co2_boot() {
  require_once('CO2.conf.php');
}

/**
 * Implementation of hook_menu()
 */
function co2_menu() {
  $items = array();

  $items['CO2'] = array(
    'title'            => 'CO2 emission',
    'description'      => 'CO2 emission display data.',
    'page callback'    => 'co2_yearly',
    'access arguments' => array('CO2 show'),
  );

  $items['CO2/yearly'] = array(
    'title'            => 'Yearly CO2 emission save',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('CO2 show'),
    'weight'           => -20,
  );

  $items['CO2/yearly/%'] = array(
    'title'            => 'Yearly CO2 emission save',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'yearly_view',
    'access arguments' => array('CO2 show'),
    'weight'           => -20,
  );

  $items['CO2/monthly'] = array(
    'title'            => 'Monthly CO2 emission save',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'co2_monthly',
    'access arguments' => array('CO2 show'),
    'weight'           => -10,
  );

  $items['CO2/monthly/%/%'] = array(
    'title'            => 'Monthly CO2 emission save',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'monthly_view',
    'access arguments' => array('CO2 show'),
    'weight'           => -10,
  );

  return $items;
}

/**
 * Implementation of hook_perm()
 */
function co2_perm() {
  return array('CO2 show');
}

/**
 * CO2 emission save yearly view
 *
 * @return string
 *  Return the yearly CO emission save in table format
 */
function co2_yearly() {
  return drupal_get_form('co2_year_view_form');
}

/**
 * CO2 emission save monthly view
 *
 * @return string
 *  Return the monthly CO emission save in table format
 */
function co2_monthly() {
  $output = drupal_get_form('co2_month_view_form');

  return $output;
}


/**
 * Validation of the CO2 emission year view
 */
function co2_year_view_form($form_state) {
  $form = array();

  $form['year'] = array(
    '#type'     => 'select',
    '#title'    => t('Year'),
    '#options'  => avaiable_years(),
    '#weight'   => -20,
  );

  $form['submit'] = array(
    '#type'     => 'submit',
    '#value'    => t('Process'),
    '#weight'   => 0,
  );

  return $form;
}

/**
 * Validation of the CO2 emission year view
 */
function co2_year_view_form_validate($form, $form_state) {}

/**
 * Submit of the CO2 emission year view
 */
function co2_year_view_form_submit($form, $form_state) {
  $v = $form_state['values'];
  drupal_goto('CO2/yearly/'. $v['year']);
}

function yearly_view() {
  return monthly_view();
}

function _data_to_table(&$result) {
  $attributes = array('class' => 'CO2_emission_save');
  $header = array(t('Conf ID'), t('Participant ID'), t('Start time'), t('Duration'), t('Counted CO2 emission'), t('Saving'));
  $output = t('There is not data for this period!');
  $table_rows = array();

  while($row = db_fetch_array($result)) {
    $rows[$row['cid']][$row['pid']] = array(
      'distance'        => $row['distance'],
      'period'          => $row['period'],
      'start_datetime'  => $row['start_datetime'],
      'duration'        => $row['duration'],
    );
  }

  if(empty($rows)) {
    return $output;
  }

  foreach($rows AS $cid => $conference) {
    $conf_save = 0;
    $conf_start_datetime = NULL;
    $conf_duration = NULL;

    foreach($conference AS $pid => $participant) {
      $emission_data = emission_computing($participant['distance'], $participant['period']);
      $conf_save += $emission_data['save'];
      $conf_emission = $emission_data['vidconf_co2'];
      $participants_rows[] = array('&nbsp', $pid, '&nbsp', $participant['period'], $emission_data['vehicle_co2'], $emission_data['save']);
      $conf_start_datetime = $participant['start_datetime'];
      $conf_duration = $participant['duration'];
    }
    $table_rows[] = array($cid, '&nbsp', $conf_start_datetime, $conf_duration, '&nbsp', $conf_save);
    $table_rows += $participants_rows;
    $table_rows[] = array('&nbsp', '&nbsp', '&nbsp', '&nbsp', '&nbsp', '&nbsp');
  }

  if (!empty($table_rows)) {
    $output .= theme_table($header, $table_rows, $attributes);
  }

return $output;
}

/**
 * Month iew of the CO2 emission data
 *
 */
function co2_month_view_form($form_state) {
  $form = co2_year_view_form(NULL);

  $form['month'] = array(
            '#type'     => 'select',
            '#title'    => t('Month'),
            '#options'  => array(
              '01' => '01',
              '02' => '02',
              '03' => '03',
              '04' => '04',
              '05' => '05',
              '06' => '06',
              '07' => '07',
              '08' => '08',
              '09' => '09',
              '10' => '10',
              '11' => '11',
              '12' => '12'
            ),
            '#weight'   => -10,
          );

  return $form;
}

/**
 * Validation of the CO2 emission month view
 */
function co2_month_view_form_validate($form, $form_state) {}

/**
 * Submit of the CO2 emission month view
 */
function co2_month_view_form_submit($form, $form_state) {
  $v = $form_state['values'];
  drupal_goto('CO2/monthly/'. $v['year'] .'/'. $v['month']);
}

function monthly_view() {
  $output = NULL;
  $year   = check_plain(arg(2));
  $month  = check_plain(arg(3));
  $limit  = 10;

  $output .= emission_summary($year, $month);

  $sql = "SELECT
            c.cid, c.start_datetime, c.duration
          FROM
            conf AS c JOIN conf_part_trans AS cpt JOIN participant AS p
          ON
            c.cid = cpt.cid AND p.pid = cpt.pid
          WHERE
            (p.longitude IS NOT NULL AND p.latitude IS NOT NULL)
            AND (c.longitude IS NOT NULL AND c.latitude IS NOT NULL)
            AND (cpt.distance IS NOT NULL AND cpt.period IS NOT NULL)
            AND c.start_datetime LIKE '%s-%s%%'
          GROUP BY c.cid";

  $count_sql = "SELECT COUNT(*) FROM (" . $sql . ") AS count_query";

  db_set_active('co2');
    $result = pager_query($sql, $limit, 0, $count_sql, array($year, $month));
  db_set_active();

  $output .= _confs_to_table(&$result);
  $output .= theme_pager(NULL , $limit);

  return $output;
}

function _confs_to_table(&$result) {
  $attributes = array('class' => 'CO2_confs');
  $header = array(t('Conf ID'), t('Start time'), t('Duration'), t('Saving'));
  $output = t('There is not data for this period!');
  $table_rows = array();

  while($row = db_fetch_array($result)) {
    $rows[$row['cid']] = array(
      'start_datetime'  => $row['start_datetime'],
      'duration'        => $row['duration'],
    );
  }

  if(empty($rows)) {
    return $output;
  }

  foreach($rows AS $cid => $conference) {
    $conf_save = 0;
    $conf_start_datetime = NULL;
    $conf_duration = NULL;

    $participants = participants_of_the_conference($cid);

    foreach($participants AS  $participant) {
      $emission_data = emission_computing($participant['distance'], $participant['period']);
      $conf_save += $emission_data['save'];
      $conf_emission = $emission_data['vidconf_co2'];
      $conf_start_datetime = $participant['start_datetime'];
      $conf_duration = $participant['duration'];
    }
    $table_rows[] = array($cid, $conference['start_datetime'], $conference['duration'], $conf_save);
  }

  if (!empty($table_rows)) {
    $output = theme_table($header, $table_rows, $attributes);
  }

return $output;
}

function participants_of_the_conference($cid) {
  $sql = "SELECT
          p.pid, cpt.distance, cpt.period
        FROM
          {conf} AS c JOIN {conf_part_trans} AS cpt JOIN {participant} AS p
        ON
          c.cid = cpt.cid AND p.pid = cpt.pid
        WHERE
          c.cid = %s";

  db_set_active('co2');
  $result = db_query($sql, $cid);
  db_set_active();

  while ($participant = db_fetch_array($result)) {
    $participants[] = $participant;
  }

  return $participants;
}

/**
 * Give back avaiable years
 *
 * @return array
 *  Avaiable years in array format.
 */
function avaiable_years() {
  $years = array();

  db_set_active('co2');
  $result = db_query("SELECT EXTRACT(YEAR FROM start_datetime) AS year FROM conf WHERE 1 GROUP BY year");
  db_set_active();

  while($year = db_fetch_array($result)) {
    $years[$year['year']] = $year['year'];
  }

  return $years;
}

/**
 * Emission save computing
 *
 */
function emission_computing($party_dist, $conf_duration) {
  $save = 0;

  $vehicle_co2 = vehicle_co2($party_dist);
  $vidconf_env_co2 = vidconf_env_co2();
  $vehicle_emission = ($party_dist/1000) * $vehicle_co2; //CO2 emission in gram
  $vidconf_emission = $conf_duration * $vidconf_env_co2; //CO2 emission in gram
  $save = $vehicle_emission - $vidconf_emission;

  return array('save' => $save, 'vehicle_co2' => $vehicle_emission, 'vidconf_co2' => $vidconf_emission);
}

function vehicle_co2($distance) {
  if ($distance > 0 AND $distance <= DISTANCE_CAR) {
    return CO2_EMISSION_CAR;
  }
  elseif ($distance > DISTANCE_CAR AND $distance <= DISTANCE_TRAIN) {
    return CO2_EMISSION_TRAIN;
  }
  elseif ($distance > DISTANCE_TRAIN AND $distance <= DISTANCE_AEROPLANE) {
    return CO2_EMISSION_AEROPLANE_800;
  }
  else {
    return CO2_EMISSION_AEROPLANE_800_PLUS;
  }
}

function vidconf_env_co2() {
  return CO2_EMISSION_MCU + CO2_EMISSION_VIDCONF_ENDPOINT;
}

function emission_summary($year, $month = '%') {
  $attributes = array('class' => 'GHG emission');
  $header = array(
      array(
        'data'  => t('GHG emission saving'),
      ),
      array(
        'data'  => t('Working hours saving'),
      ),
  );

  $table_rows = array();

  db_set_active('co2');
  $result = db_query(
    "SELECT c.cid, c.start_datetime, c.duration, p.pid, cpt.distance, cpt.period
     FROM conf AS c JOIN conf_part_trans AS cpt JOIN participant AS p
     WHERE c.cid = cpt.cid
      AND p.pid = cpt.pid
      AND (p.longitude IS NOT NULL AND p.latitude IS NOT NULL)
      AND (c.longitude IS NOT NULL AND c.latitude IS NOT NULL)
      AND (cpt.distance IS NOT NULL AND cpt.period IS NOT NULL)
      AND start_datetime LIKE '%s-%s%%'",
    $year, $month
  );
  db_set_active();

  while($row = db_fetch_array($result)) {
    $rows[$row['cid']][$row['pid']] = array(
      'distance'        => $row['distance'],
      'period'          => $row['period'],
      'start_datetime'  => $row['start_datetime'],
      'duration'        => $row['duration'],
    );
  }

  if(empty($rows)) {
    return NULL;
  }

  $sum_GHG_emission_save = 0;
  $sum_time_save = 0;
  foreach($rows AS $cid => $conference) {
    $conf_save = 0;

    foreach($conference AS $pid => $participant) {
      $emission_data = emission_computing($participant['distance'], $participant['period']);
      $conf_save += $emission_data['save'];
      $sum_time_save += $participant['period'];
      $conf_emission = $emission_data['vidconf_co2'];
    }
    $sum_GHG_emission_save += $conf_save;
  }

  $table_rows[] = array($sum_GHG_emission_save .t(' g'), $sum_time_save .t(' minutes'));

  if (!empty($table_rows)) {
    $output = theme_table($header, $table_rows, $attributes);
  }

return $output;
}
