<?php
/**
 * Implementation of hook_boot()
 */
function co2_boot() {
  require_once('cron/CO2.conf.php');
}

/**
 * Implementation of hook_menu()
 */
function co2_menu() {
  $items = array();

  $items['CO2'] = array(
    'title'            => 'CO2 emission',
    'description'      => 'CO2 emission display data.',
    'page callback'    => 'co2_yearly',
    'access arguments' => array('CO2 show'),
  );

  $items['CO2/yearly'] = array(
    'title'            => 'Yearly CO2 emission save',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('CO2 show'),
    'weight'           => -20,
  );

  $items['CO2/yearly/%'] = array(
    'title'            => 'Yearly CO2 emission save',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'yearly_view',
    'access arguments' => array('CO2 show'),
    'weight'           => -20,
  );

  $items['CO2/monthly'] = array(
    'title'            => 'Monthly CO2 emission save',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'co2_monthly',
    'access arguments' => array('CO2 show'),
    'weight'           => -10,
  );

  $items['CO2/monthly/%/%'] = array(
    'title'            => 'Monthly CO2 emission save',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'monthly_view',
    'access arguments' => array('CO2 show'),
    'weight'           => -10,
  );

  $items['CO2/conference/%'] = array(
    'title'            => 'Conference details',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'view_participants',
    'page arguments'   => array(2),
    'access arguments' => array('CO2 show'),
    'weight'           => -10,
  );

  $items['CO2/config'] = array(
    'title'            => 'Setting parameters',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'parameters',
    'access arguments' => array('CO2 show'),
    'weight'           => 0,
  );

  return $items;
}

/**
 * Implementation of hook_perm()
 */
function co2_perm() {
  return array(
    'CO2 show',
    'CO2 show extra data'
  );
}

/**
 * Implementation hook_theme()
 */
function co2_theme($existing, $type, $theme, $path) {
  return array(
    'GHG_emission_map' => array(
      'template'  => 'map',
      'arguments' => array(
        'origins'       => '[]',
        'destinations'  => '[]',
      ),
    ),
  );
}

/**
 * CO2 emission save yearly view
 *
 * @return string
 *  Return the yearly CO emission save in table format
 */
function co2_yearly() {
  return drupal_get_form('co2_year_view_form');
}

/**
 * CO2 emission save monthly view
 *
 * @return string
 *  Return the monthly CO emission save in table format
 */
function co2_monthly() {
  $output = drupal_get_form('co2_month_view_form');

  return $output;
}

/**
 * Validation of the CO2 emission year view
 */
function co2_year_view_form($form_state) {
  $form = array();

  $form['year'] = array(
    '#type'     => 'select',
    '#title'    => t('Year'),
    '#options'  => avaiable_years(),
    '#weight'   => -20,
  );

  $form['submit'] = array(
    '#type'     => 'submit',
    '#value'    => t('Process'),
    '#weight'   => 0,
  );

  return $form;
}

/**
 * Validation of the CO2 emission year view
 */
function co2_year_view_form_validate($form, $form_state) {}

/**
 * Submit of the CO2 emission year view
 */
function co2_year_view_form_submit($form, $form_state) {
  $v = $form_state['values'];
  drupal_goto('CO2/yearly/'. $v['year']);
}

function yearly_view() {
  return monthly_view();
}

/**
 * Month iew of the CO2 emission data
 *
 */
function co2_month_view_form($form_state) {
  $form = co2_year_view_form(NULL);

  $form['month'] = array(
            '#type'     => 'select',
            '#title'    => t('Month'),
            '#options'  => array(
              '01' => '01',
              '02' => '02',
              '03' => '03',
              '04' => '04',
              '05' => '05',
              '06' => '06',
              '07' => '07',
              '08' => '08',
              '09' => '09',
              '10' => '10',
              '11' => '11',
              '12' => '12'
            ),
            '#weight'   => -10,
          );

  return $form;
}

/**
 * Validation of the CO2 emission month view
 */
function co2_month_view_form_validate($form, $form_state) {}

/**
 * Submit of the CO2 emission month view
 */
function co2_month_view_form_submit($form, $form_state) {
  $v = $form_state['values'];
  drupal_goto('CO2/monthly/'. $v['year'] .'/'. $v['month']);
}

function monthly_view() {
  $output = NULL;
  $year   = check_plain(arg(2));
  $month  = check_plain(arg(3));
  $limit  = 10;

  $output .= emission_summary($year, $month);

  $sql = "SELECT
            c.cid, c.start_datetime, c.duration
          FROM
            conf AS c JOIN conf_part_trans AS cpt JOIN participant AS p
          ON
            c.cid = cpt.cid AND p.pid = cpt.pid
          WHERE
            (p.longitude IS NOT NULL AND p.latitude IS NOT NULL)
            AND (c.longitude IS NOT NULL AND c.latitude IS NOT NULL)
            AND (cpt.distance IS NOT NULL AND cpt.period IS NOT NULL)
            AND c.start_datetime LIKE '%s-%s%%'
          GROUP BY c.cid";

  $count_sql = "SELECT COUNT(*) FROM (" . $sql . ") AS count_query";

  db_set_active('co2');
    $result = pager_query($sql, $limit, 0, $count_sql, array($year, $month));
  db_set_active();

  $output .= _confs_to_table(&$result);
  $output .= theme_pager(NULL , $limit);

  return $output;
}

function _confs_to_table(&$result) {
  $attributes = array('class' => 'CO2_confs');
  $header = array(t('Conf ID'), t('Start time'), t('Duration'), t('GHG emission saving'));
  $output = t('There is not data for this period!');
  $table_rows = array();

  while($row = db_fetch_array($result)) {
    $rows[$row['cid']] = array(
      'start_datetime'  => $row['start_datetime'],
      'duration'        => $row['duration'],
    );
  }

  if(empty($rows)) {
    return $output;
  }

  foreach($rows AS $cid => $conference) {
    $conf_save = 0;
    $conf_start_datetime = NULL;
    $conf_duration = NULL;

    $participants = participants_of_the_conference($cid);
    $part_num = count($participants);

    foreach($participants AS $participant) {
      $emission_data = emission_computing($participant['distance'], $participant['period'], $part_num);
      $conf_save += $emission_data['save'];
    }

    $table_rows[] = array(
      l($cid, 'CO2/conference/'.$cid),// link to the conference details
      $conference['start_datetime'],// conference start datetime
      hours_and_minutes($conference['duration']),// duration
      quantity_converter(round($conf_save / 1000, 2)),// GHG emission saving
    );
  }

  if (!empty($table_rows)) {
    $output = theme_table($header, $table_rows, $attributes);
  }

return $output;
}

function participants_of_the_conference($cid) {
  $sql = "SELECT
          p.pid, cpt.distance, cpt.period
        FROM
          {conf} AS c JOIN {conf_part_trans} AS cpt JOIN {participant} AS p
        ON
          c.cid = cpt.cid AND p.pid = cpt.pid
        WHERE
          c.cid = %d";

  db_set_active('co2');
  $result = db_query($sql, $cid);
  db_set_active();

  while ($participant = db_fetch_array($result)) {
    $participants[] = $participant;
  }

  return $participants;
}

/**
 *  Show a conference participant, and the participants savings.
 *
 * @param $cid
 *   Conference ID, it is an integer.
 *
 * @return
 *   HTML table which containing participant of the conference and their savings.
 */
function view_participants($cid) {
  $attributes = array('class' => 'conference details');
  $header = array(t('Participant ID'), t('Suspected GHG emission'), t('GHG emission saving'), t('Working hours savings'));
  $output = t('There is not participant!');
  $table_rows = array();
  $extra_data = user_access('CO2 show extra data');

  $sql = "SELECT
            p.pid, cpt.distance, cpt.period, p.latitude, p.longitude, c.latitude AS conf_lat, c.longitude AS conf_lng
          FROM
            conf AS c JOIN conf_part_trans AS cpt JOIN participant AS p
          ON
            c.cid = cpt.cid AND p.pid = cpt.pid
          WHERE
            c.cid = %d";

  db_set_active('co2');
  $result = db_query($sql, $cid);
  db_set_active();

  while($row = db_fetch_array($result)) {
    $rows[] = array(
      'pid'       => $row['pid'],
      'distance'  => $row['distance'],
      'period'    => $row['period'],
      'latitude'  => $row['latitude'],
      'longitude' => $row['longitude'],
    );
    $conf_coordinate = array('lat' => $row['conf_lat'], 'lng' => $row['conf_lng']);
  }

  if(empty($rows)) {
    return $output;
  }

  $origins      = '[';
  $destinations = '[';
  $part_num = count($rows);
  foreach($rows AS $key => $participant) {
    $emission_data = emission_computing($participant['distance'], $participant['period'], $part_num);
    $conf_save += $emission_data['save'];
    $conf_emission = $emission_data['vidconf_co2'];
    $table_rows[$key] = array(
      $participant['pid'],
      quantity_converter(round($emission_data['vehicle_co2'] / 1000, 2)),
      quantity_converter(round($emission_data['save'] / 1000, 2)),
      hours_and_minutes($participant['period'])
    );
    if ($extra_data) {
      array_push($table_rows[$key], $participant['latitude']);
      array_push($table_rows[$key], $participant['longitude']);
      $origins      .= 'new google.maps.LatLng('. $conf_coordinate['lat'] .', '. $conf_coordinate['lng'] .'), ';
      $destinations .= 'new google.maps.LatLng('. $participant['latitude'] .', '. $participant['longitude'] .'), ';
    }
    $conf_start_datetime = $participant['start_datetime'];
    $conf_duration = $participant['duration'];
  }
  $origins      .= ']';
  $destinations .= ']';

  if (!empty($table_rows)) {
    if ($extra_data) {
      $header[] = t('Latitude');
      $header[] = t('Longitude');
    }
    $output = theme_table($header, $table_rows, $attributes);

    //check the user can see the extra participant daza
    if ($extra_data) {
      $output .= theme('GHG_emission_map', $origins, $destinations);
    }
  }

return $output;
}

/**
 * Give back avaiable years
 *
 * @return array
 *  Avaiable years in array format.
 */
function avaiable_years() {
  $years = array();

  db_set_active('co2');
  $result = db_query("SELECT EXTRACT(YEAR FROM start_datetime) AS year FROM conf WHERE 1 GROUP BY year");
  db_set_active();

  while($year = db_fetch_array($result)) {
    $years[$year['year']] = $year['year'];
  }

  return $years;
}

/**
 * Emission save computing
 *
 * @param $party_dist
 *   Participant distance from the conferende place in meter.
 * @param $conf_duration
 *   Conference duration in second.
 *
 * @return
 *   An array which is containing the GHG emission save(key: save),
 *   the vehicle GHG emission(key: vehicle_co2)
 *   and the vidconf equipments GHG emission(key: vidconf_co2).
 */
function emission_computing($party_dist, $conf_duration, $part_num) {
  $save = 0;

  $vehicle_co2      = vehicle_co2($party_dist);
  $vidconf_env_co2  = vidconf_env_co2($part_num);
  $vehicle_emission = ( $party_dist / 1000 ) * $vehicle_co2 * 2; //round-trip vehicle CO2 emission in gramm
  $vidconf_emission = $conf_duration * $vidconf_env_co2; //CO2 emission in gramm
  $save             = $vehicle_emission - $vidconf_emission;

  return array('save' => $save, 'vehicle_co2' => $vehicle_emission, 'vidconf_co2' => $vidconf_emission);
}

/**
 * Give back the vehicle GHG emission based on the distance in g/km
 *
 * @param $distance
 *   Distance in meter.
 *
 * @return
 *   Vehicle GHG emission value in g/km.
 */
function vehicle_co2($distance) {
  $distance = $distance / 1000;
  if ($distance > 0 AND $distance <= CO2_DISTANCE_CAR) {
    return CO2_EMISSION_CAR;
  }
  elseif ($distance > CO2_DISTANCE_CAR AND $distance <= CO2_DISTANCE_TRAIN) {
    return CO2_EMISSION_TRAIN;
  }
  elseif ($distance > CO2_DISTANCE_TRAIN AND $distance <= CO2_DISTANCE_AEROPLANE) {
    return CO2_EMISSION_AEROPLANE_800;
  }
  elseif ($distance > CO2_DISTANCE_AEROPLANE) {
    return CO2_EMISSION_AEROPLANE_800_PLUS;
  }
  else {
    return 0;
  }
}

/**
 * Give back the GHG emission value of the videoconference equipments.
 *
 * @return
 *   Amount of the MCU and the endpoints GHG emission in g/hour.
 */
function vidconf_env_co2($part_num = 2) {
  if ($part_num > 2) {
    return ((CO2_EMISSION_MCU + CO2_EMISSION_GATEKEEPER) / $part_num) + CO2_EMISSION_VIDCONF_ENDPOINT_DISPLAY + CO2_EMISSION_VIDCONF_ENDPOINT;
  }
  elseif($part_num === 2) {
    return (CO2_EMISSION_GATEKEEPER / $part_num) + CO2_EMISSION_VIDCONF_ENDPOINT_DISPLAY + CO2_EMISSION_VIDCONF_ENDPOINT;
  }
}

/**
 * Summary of the period. All GHG emission and work hour saving.
 *
 * @param $year
 *   Year of the period. Required!
 * @param $month
 *   Month of the period. Optional.
 *
 * @return
 *   Return the summarized data in a HTML table.
 */
function emission_summary($year, $month = '%') {
  $attributes = array('class' => 'GHG emission');
  $header = array(
      array('data'  => t('Number of conference'),),
      array('data'  => t('GHG emission saving'),),
      array('data'  => t('Working hours saving'),),
  );

  $table_rows = array();

  $sql = "SELECT
            c.cid, c.start_datetime, c.duration, p.pid, cpt.distance, cpt.period
          FROM
            conf AS c JOIN conf_part_trans AS cpt JOIN participant AS p
          WHERE
            c.cid = cpt.cid
            AND p.pid = cpt.pid
            AND (p.longitude IS NOT NULL AND p.latitude IS NOT NULL)
            AND (c.longitude IS NOT NULL AND c.latitude IS NOT NULL)
            AND (cpt.distance IS NOT NULL AND cpt.period IS NOT NULL)
            AND start_datetime LIKE '%s-%s%%'";

  $sql_num = $sql .'GROUP BY cid';

  db_set_active('co2');
  $result = db_query($sql, $year, $month);
  $result_num = db_query($sql_num, $year, $month);
  $numberofconf = db_affected_rows();
  db_set_active();

  while($row = db_fetch_array($result)) {
    $rows[$row['cid']][$row['pid']] = array(
      'distance'        => $row['distance'],
      'period'          => $row['period'],
      'start_datetime'  => $row['start_datetime'],
      'duration'        => $row['duration'],
    );
  }

  if(empty($rows)) {
    return NULL;
  }

  $sum_GHG_emission_save = 0;
  $sum_time_save = 0;
  foreach($rows AS $cid => $conference) {
    $conf_save = 0;
    $part_num = count($conference);

    foreach($conference AS $pid => $participant) {
      $emission_data  = emission_computing($participant['distance'], $participant['period'], $part_num);
      $conf_save      += $emission_data['save'];
      $sum_time_save  += $participant['period'];
      $conf_emission  = $emission_data['vidconf_co2'];
    }
    $sum_GHG_emission_save += $conf_save;
  }

  $sum_GHG_emission_save = ceil( $sum_GHG_emission_save / 1000 );//from g to kg
  $sum_time_save = hours_and_minutes($sum_time_save);//from s to days,hours,minutes,secounds
  $table_rows[] = array($numberofconf, quantity_converter($sum_GHG_emission_save), $sum_time_save);

  if (!empty($table_rows)) {
    $output = theme_table($header, $table_rows, $attributes);
  }

return $output;
}

/**
 * Convert seconds to days hours minutes second fromat
 *
 * @param $seconds
 *   Seconds to convert.
 *
 * @return
 *   Return whit string which is containing the input seconds converted to "# day # hour # minute # second" format.
 */
function hours_and_minutes($seconds) {
  $time = '';

  $minutes  = floor( $seconds / 60);
  $hours    = floor( $minutes / 60 );
  $days     = floor( $hours / 24 );
  $years    = floor( $days / 365 );

  $display_seconds  = $seconds - ( $minutes * 60 );
  $display_minutes  = $minutes - ( $hours * 60 );
  $display_hours    = $hours - ( $days * 24 );
  $display_days     = $days - ( $years * 365 );

  $time .= $years ? format_plural($years, '1 year', '@count years') .' ' : NULL;
  $time .= $display_days ? format_plural($display_days, '1 day', '@count days') .' ' : NULL;
  $time .= $display_hours ? format_plural($display_hours, '1 hour', '@count hours') .' ' : NULL;
  $time .= $display_minutes ? format_plural($display_minutes, '1 minute', '@count minutes') .' ' : NULL;
  $time .= $display_second ? format_plural($display_seconds, '1 second', '@count seconds') : NULL;

  return $time;
}

/**
 * Display the GHG emisson saving calculator konstans onto the web
 *
 * @return
 *   HTML table with the parameter, its value and a short description.
*/
function parameters() {
  $attributes = array('class' => 'GHG_emission_config');
  $header = array(t('Configuration parameter name'), t('Value'), t('Description'));
  $output = t('There is not any configuration parameters!');
  $parameters = array();

  $parameters_temp = get_defined_constants();
  foreach($parameters_temp AS $key => $value) {
    if (preg_match('/^CO2_.*$/', $key)) {
      $table_rows[] = array($key, $value, parameter_help($key));
    }
  }

  if (!empty($table_rows)) {
    $output = theme_table($header, $table_rows, $attributes);
  }

  return $output;
}

/**
 * Add help text for the module confog parameters
 *
 * @param string $parameter
 *   Name of the config parameter
 *
 * @return
 *   Give back the config parameter description in string or NULL if help not exists.
 */
function parameter_help($parameter) {
  $help_text[] = array();

  return $help_text[$parameter];
}

/**
 * Quantity unit converter
 *
 * @param double $value
 *   Values in kg without unit.
 *
 * @return
 *   Value with unit in a string
 */
function quantity_converter($kg) {
  $tons = $kg / 1000;
  if ($tons >= 1000) {
    return format_plural($tons, '1 ton', '@count tons');
  }
  else {
    return format_plural($kg, '1 kg', '@count kg');
  }
}
