= GHG emission saving calculator from the video conference logs

== Introduction

This project is GNU Gatekeeper CDR log messages processor to calculate GHG emission save of the video conference units.

== Features

* filter the original log messages from MySQL database
* separate the conferences and the participants from the CDR messages
* resolve participant locations by GDS number or IP address
* resolve distance and possible travel (by car) time with Google distance API between conferences and participant
* create table base GHG emission save report monthly and yearly resolution
* show participant GHG emission saving per conference
* show the particiapnts and the calulated route (by car) on the Google Maps

== How is it works?

Install the croner scripts, which are process the logs by the algorithm. Filtered out the unprocessable data and moved data into the temp table. Then scripts separate and write into database the conferences and the conferences participants from the CDR log message. Than resolve the participants and the conferences location. Finally it resolve the distance and the possibly travel time between the conference and the participants.

After that the Drupal module show GHG emission save report in yearly and monthly resolution.

== Algorithm

As the first step, we collect the conference log entries from various databases and consolidate them into a common data structure into a temporary database table.
After pre filtering the logs/conferences as the second step we restructure the data into a structure that can be handled much more easier later while preparing the reports.

Here the CONFERENCE_ID and the PARTICIPANT_ID are unique database scoped own identifiers. In the process almost the all personal data.

While filtering the data, calculating the derived values we are using the following algorithm:

1. Collect every information in a common format;
2. Drop all conference shorter than 5 minutes assuming that these were test calls and also narrow log records of only one gatekeeper.
3. Before processing drop log records of the VCR (Video Content Recorder)-
4. Than separate the peer-to-peer, MCU conferences and the participants and create connection between them.
  While (process every conference assuming that CONF_ID is a unique identifier):
  if (the conference do not have more than one participant):
    We can forget about this conference

5. Assign the location of the participants:
    if (the IP or GDS of participant is known):
      if (we know really specific location from our own register):
        store location information into the participant record
      else:
        Find out the most exact location information and store it into the participant record (City or Country level information depending on the source: IP or GDS)
    else:
      We have no location information about the participant so we can forget about it. Remove Participant and the related confernece-participant connection from the database

6. Set the location, start_time and duration of the conference to a randomly chosen participant
7. Calculate the distance of every participants of this conference to its location and the time of the travel needed using Google Maps API
8. Since this query is limited the results are cached.
9. Create reports using mainly "Conference-Participant" table for the time slot requested by the user by summarizing the distances not done.

=== Input format

In our organization collect CDR into MySQL tables. So it easily filter and convert to the input format which is same as templ_log table schema:
* conf_id char (100): identifier of a conference
* start_datetime date time: when the conference was start
* duration integer (10): conference duration in second
* caller_GDS char (100): caller's GDS number if it exists
* called_GDS char (100): called's GDS number if it exists
* caller_IP char (100): caller's IP address if it exists
* called_IP char (100): called's IP address if it exists

Afterwards we process this database records not the original ones. For these reasons, if someone want to use this application he/she can convert his/her log entries to this format and insert into temp_log table.

There is not import API or interface yet. This conversion is must be manually we do not provided any converter tool.

=== Filtering

So before log parsing we have to filter the input data:
 1. First select record of only one gatekeeper
 2. Then drop the short conference (less then 5 minutes)
 3. After that drop the VCR (Video Content Recorder) records
 4. Finally insert this records into the temp_log table.

 In practice this is only two step a SQL SELECT and the SQL INSERT operation.

=== Conference and participant unstick

In the beginning separate the MCU conference and the participants of this type of conference. The procedure is as follow:
1. Select all records from temp_log table where the called IP, called GDS, the caller IP or the caller GDS belong to MCU
2. Than grouped these record by date and GDS number, these are the conferences, store them into conf table
3. That groups containing the participant, so we can store into the participant table
4. After participants storing, we can create connection between the conferences and the participants
5. Finally delete the processed records

After that process the peer-to-peer video conference. It is very simple because what record is not belong to MCU conference is a peer-to-peer conference. This conferences are only one record in the database so we do not grouped them.
1. Select records what are not MCU conference
2. Create the participants and the conference per record
3. Connected them into the conf_part_trans table
4. Cleaned this record from the temp_log table

Create the participants per conference and add a conference. In this time we only know participant's GDS number or/and IP number. About the conference generally know only start date and time and the conference duration what we calculate from the participant first connection time and the last disconnection time.

=== Location resolver

When we have participants we need resolve them location:
1. Select participants which have got unresolved location
2. In this action we used the own only Hungarian GDS number-location database if there is an Hungarian GDS number
3. If the GDS number is not Hungarian we resolve location by the GDS country prefix or only there is IP number we use freegeoip.com IP-to-coordinate API.
4. Update the participant location

The location accuracy is very divergence in many case it is only approximate data!

=== Location accurancy improvement

Our NREN we have a precise database our VC endpoint location informations. So the Hungarian perticipant location is very precise. If your NREN has a same databas you can improve you GHG emission report.

But this you have to modify some PHP code like the follow example code:
------
#cron/location_resolvel_croner.php
...

class myNRENLocationResolver extends LocationResolver {
  public function   public function ownLocationByGDS($GDS) {
    #your code here
  }
}

#LocationResolver::resolver();
myNRENLocationResolver::resolver();

...
------

=== Distance and duration resolver

After or parallel with described in the previous tow paragraphs processes we can start resolve distance and the duration. What would we do this before must be nominated by the conference venue. It will be a random connected participant's location.

We used Google Maps Distance matrix API to provide distance and the duration of the trip. This web-service provide distance and the trip duration between two point on the map on the road network. The API can calculate distance in only three mode walking, bicycling and driving (with car). We use only the third driving mode to calculate the distance and duration. Despite to the web-servise do not capable to plan route with train or aeroplane we use this data when we calculate the journey GHG emission. We think this is an acceptable simplification.

But some cases we do not get back values for example the origin and the destination are not on same continent or the map is incomplete. In this case we figure the tow point absolute distance each other and we try estimate the duration of the journey.

Google API has a many limitations:
100 elements per query.
100 elements per 10 seconds.
2â€‰500 elements per 24 hour period.

For this reasons and optimization, speed-up effort forcing us the reuse the previous A to B and B to A points reach as a cache.

=== GHG saving calculator

On a more precise way, the saved emission is equal to sum(calculated distance * vehicle specific GHG emission) - (time of conference * (conference type specific GHG emission + GHG emission of an average HD video conference endpoint device + GHG emission of the average display) * number of participants)

When calculating vehicle dependent emission we are assuming that the following vehicles are used on different distances:
distance vehicle
    0 - X car
    X - Y train
    Y - 800 km air-plane
    801 km - infinity aeroplane 800+ km

X, Y and the other constants are parameters of the algorithm.

Conference type depend GHG emission:
* MCU conference GHG emission = (MCU emission + gatekeeper emission) / number of participants
* peer-to-peer conference GHG emission = gatekeeper emission / number of participants

=== Visualizer

This is a very simple Drupal module which serve two resolution of the GHG saving report monthly and yearly. In the first case we have to given the year and the month and the second case we have to given only the year. Both two case give back a paged list of the conferences and above this list there is a summary to the specified period. In the list show the conference ID, conference start date time, conference duration and the GHG emission save in kg or ton.

Clicking on the conference ID we can show the participants of the conference and their detailed data such as:
* participant ID
* Suspected GHG emission
* GHG emission saving
* Working hours savings
and with special permission
* coordinates
* show on Google map

The third part of the surface is the configuration display, where we can see what is the constants value.

List of the available constants:
* CO2_EMISSION_CAR: average car GHG emission in g/km
* CO2_EMISSION_TRAIN: average Hungarian train GHG emission in g/km
* CO2_EMISSION_AEROPLANE_800: average aeroplane GHG emission under 800km in g/km
* CO2_EMISSION_AEROPLANE_800_PLUS: average aeroplane GHG emission over 800km g/km
* CO2_EMISSION_MCU: MCU GHG emission in g/s
* CO2_EMISSION_GATEKEEPER: gatekeeper GHG emission in g/s
* CO2_EMISSION_VIDCONF_ENDPOINT: video conference endpoint GHG emission in g/s
* CO2_EMISSION_VIDCONF_ENDPOINT_DISPLAY: video conference endpoint display GHG emission in g/s
* CO2_DISTANCE_CAR: maximal distance value when we calculate with car GHG emission value in km
* CO2_DISTANCE_TRAIN: maximal distance value when we calculate with train GHG emission value in km
* CO2_DISTANCE_AEROPLANE: maximal distance value when we calculate with aeroplane GHG emission value in km
* CO2_AVERAGE_SPEED_AEROPLANE: average aeroplane speed in m/s to the duration calculation when we calculate the absolute distance

== Install

=== Install the Drupal CO2 module

----------
cd /your/drupal_root/sites/all/modules
git clone git://github.com/dorion/CO2.git
----------

Add the following lines to the Drupal settings.php:
----------
 $db_url = array(
             'default' => 'mysqli://drupal_db_user:password@sqlserver/drupal_database',
             'co2'     => 'mysqli://co2_db_user:password@sqlserver/co2_database',
           );
----------

Naturally you have to change the db_user names, password, sql server and the database names.

After go to http://yourdrupal.com/admin/modules and enable the "CO2 emission reporter" module.

=== Configure cron jobs

The processor script written in PHP but they have not got any output. Because this scripts run with cli PHP in the background. The PHP is a script program language so we have to call with manually or can be automated with cron. See the crontab file content below:

----------
crontab -e

MAILTO=youremail@example.com
*/5 * * * * /var/www/drupal_6/sites/all/modules/CO2/cron/ghg_calculator_cron
----------

=== Create database structure

Here is the database schema:

----------
    CREATE TABLE conf (
      cid int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Conference new ID',
      start_datetime datetime DEFAULT NULL COMMENT 'Conference start date and time',
      duration int(10) unsigned DEFAULT NULL COMMENT 'Conference duration',
      latitude double DEFAULT NULL COMMENT 'Latitude',
      longitude double DEFAULT NULL COMMENT 'Longitude',
      PRIMARY KEY (cid)
    ) DEFAULT CHARSET=utf8;

    -- --------------------------------------------------------
    CREATE TABLE conf_part_trans (
      cid int(10) unsigned NOT NULL COMMENT 'Conference ID',
      pid int(10) unsigned NOT NULL COMMENT 'Participant ID',
      distance double unsigned DEFAULT NULL COMMENT 'Distance between the confernce palce and the participant',
      period int(10) unsigned DEFAULT NULL COMMENT 'The calculated journey duration.',
      PRIMARY KEY (cid,pid)
    ) DEFAULT CHARSET=utf8;

    -- --------------------------------------------------------
    CREATE TABLE participant (
      pid int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Participant ID',
      GDS varchar(20) COLLATE utf8_hungarian_ci DEFAULT NULL COMMENT 'GDS number if it exists',
      IP varchar(100) COLLATE utf8_hungarian_ci DEFAULT NULL COMMENT 'IP number is ot exists',
      latitude double DEFAULT NULL COMMENT 'Latitude',
      longitude double DEFAULT NULL COMMENT 'Longitude',
      PRIMARY KEY (pid)
    ) DEFAULT CHARSET=utf8;

    -- --------------------------------------------------------
    CREATE TABLE temp_log (
      ID int(10) unsigned NOT NULL AUTO_INCREMENT,
      conf_id varchar(100) COLLATE utf8_unicode_ci NOT NULL,
      start_datetime datetime NOT NULL,
      duration int(10) unsigned NOT NULL COMMENT 'Duration in second',
      caller_GDS varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
      called_GDS varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
      caller_IP varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
      called_IP varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
      PRIMARY KEY (ID)
    ) DEFAULT CHARSET=utf8;

----------

=== Rename and fill in the config files
----------
cd yourDrupalInstallation/module/CO2
mv cron/CO2.conf.php.default cron/CO2.conf.php
mv cron/db.inc.php.default cron/db.inc.php
----------

Then fill in them with the right data.

== Future development possibility

* Report narrow to regions or organisations
* Optional cost calculating (need more data)
* Export reports to PDF, csv, xls format

== Implementation Remarks

* The GHG calculator implemented in http://php.net[PHP] and http://api.drupal.org[Drupal API]
* Powerful database back-end on http://www.mysql.com[MySQL]
* Location resolving by IP with http://freegeoip.net[Free geoIP]
* Destination and travel time resolving with http://code.google.com/intl/hu-HU/apis/maps/documentation/distancematrix/[The Google Distance Matrix API]
